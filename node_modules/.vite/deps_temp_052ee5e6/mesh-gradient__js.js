import {
  __commonJS
} from "./chunk-BUSYA2B4.js";

// node_modules/mesh-gradient.js/lib/core/webgl.js
var require_webgl = __commonJS({
  "node_modules/mesh-gradient.js/lib/core/webgl.js"(exports) {
    "use strict";
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MiniGl = exports.normalizeColor = void 0;
    function normalizeColor(hexCode) {
      return [(hexCode >> 16 & 255) / 255, (hexCode >> 8 & 255) / 255, (255 & hexCode) / 255];
    }
    exports.normalizeColor = normalizeColor;
    ["SCREEN", "LINEAR_LIGHT"].reduce(function(hexCode, t, n) {
      var _a;
      return Object.assign(hexCode, (_a = {}, _a[t] = n, _a));
    }, {});
    var MiniGl = (
      /** @class */
      function() {
        function MiniGl2(canvas, width, height, debug) {
          if (debug === void 0) {
            debug = false;
          }
          var _miniGl = this, debug_output = -1 !== document.location.search.toLowerCase().indexOf("debug=webgl");
          _miniGl.canvas = canvas, _miniGl.gl = _miniGl.canvas.getContext("webgl", {
            antialias: true,
            preserveDrawingBuffer: true
          }), _miniGl.meshes = [];
          var context = _miniGl.gl;
          width && height && this.setSize(width, height), _miniGl.lastDebugMsg, _miniGl.debug = debug && debug_output ? function(e) {
            var t = /* @__PURE__ */ new Date();
            t - _miniGl.lastDebugMsg > 1e3 && console.log("---"), console.log.apply(console, __spreadArray([t.toLocaleTimeString() + Array(Math.max(0, 32 - e.length)).join(" ") + e + ": "], Array.from(arguments).slice(1), false)), _miniGl.lastDebugMsg = t;
          } : function() {
          }, Object.defineProperties(_miniGl, {
            Material: {
              enumerable: false,
              value: (
                /** @class */
                function() {
                  function value(vertexShaders, fragments, uniforms) {
                    if (uniforms === void 0) {
                      uniforms = {};
                    }
                    var material = this;
                    function getShaderByType(type, source) {
                      var shader = context.createShader(type);
                      return context.shaderSource(shader, source), context.compileShader(shader), context.getShaderParameter(shader, context.COMPILE_STATUS) || console.error(context.getShaderInfoLog(shader)), _miniGl.debug("Material.compileShaderSource", {
                        source
                      }), shader;
                    }
                    function getUniformVariableDeclarations(uniforms2, type) {
                      return Object.entries(uniforms2).map(function(_a) {
                        var uniform = _a[0], value2 = _a[1];
                        return value2.getDeclaration(uniform, type);
                      }).join("\n");
                    }
                    material.uniforms = uniforms, material.uniformInstances = [];
                    var prefix = "\n              precision highp float;\n            ";
                    material.vertexSource = "\n              ".concat(prefix, "\n              attribute vec4 position;\n              attribute vec2 uv;\n              attribute vec2 uvNorm;\n              ").concat(getUniformVariableDeclarations(_miniGl.commonUniforms, "vertex"), "\n              ").concat(getUniformVariableDeclarations(uniforms, "vertex"), "\n              ").concat(vertexShaders, "\n            "), material.Source = "\n              ".concat(prefix, "\n              ").concat(getUniformVariableDeclarations(_miniGl.commonUniforms, "fragment"), "\n              ").concat(getUniformVariableDeclarations(uniforms, "fragment"), "\n              ").concat(fragments, "\n            "), material.vertexShader = getShaderByType(context.VERTEX_SHADER, material.vertexSource), material.fragmentShader = getShaderByType(context.FRAGMENT_SHADER, material.Source), material.program = context.createProgram(), context.attachShader(material.program, material.vertexShader), context.attachShader(material.program, material.fragmentShader), context.linkProgram(material.program), context.getProgramParameter(material.program, context.LINK_STATUS) || console.error(context.getProgramInfoLog(material.program)), context.useProgram(material.program), material.attachUniforms(void 0, _miniGl.commonUniforms), material.attachUniforms(void 0, material.uniforms);
                  }
                  value.prototype.attachUniforms = function(name, uniforms) {
                    var material = this;
                    void 0 === name ? Object.entries(uniforms).forEach(function(_a) {
                      var name2 = _a[0], uniform = _a[1];
                      material.attachUniforms(name2, uniform);
                    }) : "array" == uniforms.type ? uniforms.value.forEach(function(uniform, i) {
                      return material.attachUniforms("".concat(name, "[").concat(i, "]"), uniform);
                    }) : "struct" == uniforms.type ? Object.entries(uniforms.value).forEach(function(_a) {
                      var uniform = _a[0], i = _a[1];
                      return material.attachUniforms("".concat(name, ".").concat(uniform), i);
                    }) : (_miniGl.debug("Material.attachUniforms", {
                      name,
                      uniform: uniforms
                    }), material.uniformInstances.push({
                      uniform: uniforms,
                      location: context.getUniformLocation(material.program, name)
                    }));
                  };
                  return value;
                }()
              )
            },
            Uniform: {
              enumerable: false,
              value: (
                /** @class */
                function() {
                  function value(e) {
                    this.type = "float", Object.assign(this, e);
                    this.typeFn = {
                      float: "1f",
                      int: "1i",
                      vec2: "2fv",
                      vec3: "3fv",
                      vec4: "4fv",
                      mat4: "Matrix4fv"
                    }[this.type] || "1f", this.update();
                  }
                  value.prototype.update = function(value2) {
                    void 0 !== this.value && context["uniform".concat(this.typeFn)](value2, 0 === this.typeFn.indexOf("Matrix") ? this.transpose : this.value, 0 === this.typeFn.indexOf("Matrix") ? this.value : null);
                  };
                  value.prototype.getDeclaration = function(name, type, length) {
                    var uniform = this;
                    if (uniform.excludeFrom !== type) {
                      if ("array" === uniform.type)
                        return uniform.value[0].getDeclaration(name, type, uniform.value.length) + "\nconst int ".concat(name, "_length = ").concat(uniform.value.length, ";");
                      if ("struct" === uniform.type) {
                        var name_no_prefix = name.replace("u_", "");
                        return name_no_prefix = name_no_prefix.charAt(0).toUpperCase() + name_no_prefix.slice(1), "uniform struct ".concat(name_no_prefix, " \n                                  {\n") + Object.entries(uniform.value).map(function(_a) {
                          var name2 = _a[0], uniform2 = _a[1];
                          return uniform2.getDeclaration(name2, type).replace(/^uniform/, "");
                        }).join("") + "\n} ".concat(name).concat(length > 0 ? "[".concat(length, "]") : "", ";");
                      }
                      return "uniform ".concat(uniform.type, " ").concat(name).concat(length > 0 ? "[".concat(length, "]") : "", ";");
                    }
                  };
                  return value;
                }()
              )
            },
            PlaneGeometry: {
              enumerable: false,
              value: (
                /** @class */
                function() {
                  function value(width2, height2, n, i, orientation) {
                    context.createBuffer(), this.attributes = {
                      position: new _miniGl.Attribute({
                        target: context.ARRAY_BUFFER,
                        size: 3
                      }),
                      uv: new _miniGl.Attribute({
                        target: context.ARRAY_BUFFER,
                        size: 2
                      }),
                      uvNorm: new _miniGl.Attribute({
                        target: context.ARRAY_BUFFER,
                        size: 2
                      }),
                      index: new _miniGl.Attribute({
                        target: context.ELEMENT_ARRAY_BUFFER,
                        size: 3,
                        type: context.UNSIGNED_SHORT
                      })
                    }, this.setTopology(n, i), this.setSize(width2, height2, orientation);
                  }
                  value.prototype.setTopology = function(e, t) {
                    if (e === void 0) {
                      e = 1;
                    }
                    if (t === void 0) {
                      t = 1;
                    }
                    var n = this;
                    n.xSegCount = e, n.ySegCount = t, n.vertexCount = (n.xSegCount + 1) * (n.ySegCount + 1), n.quadCount = n.xSegCount * n.ySegCount * 2, n.attributes.uv.values = new Float32Array(2 * n.vertexCount), n.attributes.uvNorm.values = new Float32Array(2 * n.vertexCount), n.attributes.index.values = new Uint16Array(3 * n.quadCount);
                    for (var e_1 = 0; e_1 <= n.ySegCount; e_1++)
                      for (var t_1 = 0; t_1 <= n.xSegCount; t_1++) {
                        var i = e_1 * (n.xSegCount + 1) + t_1;
                        if (n.attributes.uv.values[2 * i] = t_1 / n.xSegCount, n.attributes.uv.values[2 * i + 1] = 1 - e_1 / n.ySegCount, n.attributes.uvNorm.values[2 * i] = t_1 / n.xSegCount * 2 - 1, n.attributes.uvNorm.values[2 * i + 1] = 1 - e_1 / n.ySegCount * 2, t_1 < n.xSegCount && e_1 < n.ySegCount) {
                          var s = e_1 * n.xSegCount + t_1;
                          n.attributes.index.values[6 * s] = i, n.attributes.index.values[6 * s + 1] = i + 1 + n.xSegCount, n.attributes.index.values[6 * s + 2] = i + 1, n.attributes.index.values[6 * s + 3] = i + 1, n.attributes.index.values[6 * s + 4] = i + 1 + n.xSegCount, n.attributes.index.values[6 * s + 5] = i + 2 + n.xSegCount;
                        }
                      }
                    n.attributes.uv.update(), n.attributes.uvNorm.update(), n.attributes.index.update(), _miniGl.debug("Geometry.setTopology", {
                      uv: n.attributes.uv,
                      uvNorm: n.attributes.uvNorm,
                      index: n.attributes.index
                    });
                  };
                  value.prototype.setSize = function(width2, height2, orientation) {
                    if (width2 === void 0) {
                      width2 = 1;
                    }
                    if (height2 === void 0) {
                      height2 = 1;
                    }
                    if (orientation === void 0) {
                      orientation = "xz";
                    }
                    var geometry = this;
                    geometry.width = width2, geometry.height = height2, geometry.orientation = orientation, geometry.attributes.position.values && geometry.attributes.position.values.length === 3 * geometry.vertexCount || (geometry.attributes.position.values = new Float32Array(3 * geometry.vertexCount));
                    var o = width2 / -2, r = height2 / -2, segment_width = width2 / geometry.xSegCount, segment_height = height2 / geometry.ySegCount;
                    for (var yIndex = 0; yIndex <= geometry.ySegCount; yIndex++) {
                      var t = r + yIndex * segment_height;
                      for (var xIndex = 0; xIndex <= geometry.xSegCount; xIndex++) {
                        var r_1 = o + xIndex * segment_width, l = yIndex * (geometry.xSegCount + 1) + xIndex;
                        geometry.attributes.position.values[3 * l + "xyz".indexOf(orientation[0])] = r_1, geometry.attributes.position.values[3 * l + "xyz".indexOf(orientation[1])] = -t;
                      }
                    }
                    geometry.attributes.position.update(), _miniGl.debug("Geometry.setSize", {
                      position: geometry.attributes.position
                    });
                  };
                  return value;
                }()
              )
            },
            Mesh: {
              enumerable: false,
              value: (
                /** @class */
                function() {
                  function value(geometry, material) {
                    var mesh = this;
                    mesh.geometry = geometry, mesh.material = material, mesh.wireframe = false, mesh.attributeInstances = [], Object.entries(mesh.geometry.attributes).forEach(function(_a) {
                      var e = _a[0], attribute = _a[1];
                      mesh.attributeInstances.push({
                        attribute,
                        location: attribute.attach(e, mesh.material.program)
                      });
                    }), _miniGl.meshes.push(mesh), _miniGl.debug("Mesh.constructor", {
                      mesh
                    });
                  }
                  value.prototype.draw = function() {
                    context.useProgram(this.material.program), this.material.uniformInstances.forEach(function(_a) {
                      var e = _a.uniform, t = _a.location;
                      return e.update(t);
                    }), this.attributeInstances.forEach(function(_a) {
                      var e = _a.attribute, t = _a.location;
                      return e.use(t);
                    }), context.drawElements(this.wireframe ? context.LINES : context.TRIANGLES, this.geometry.attributes.index.values.length, context.UNSIGNED_SHORT, 0);
                  };
                  value.prototype.remove = function() {
                    var _this = this;
                    _miniGl.meshes = _miniGl.meshes.filter(function(e) {
                      return e != _this;
                    });
                  };
                  return value;
                }()
              )
            },
            Attribute: {
              enumerable: false,
              value: (
                /** @class */
                function() {
                  function value(e) {
                    this.type = context.FLOAT, this.normalized = false, this.buffer = context.createBuffer(), Object.assign(this, e), this.update();
                  }
                  value.prototype.update = function() {
                    void 0 !== this.values && (context.bindBuffer(this.target, this.buffer), context.bufferData(this.target, this.values, context.STATIC_DRAW));
                  };
                  value.prototype.attach = function(e, t) {
                    var n = context.getAttribLocation(t, e);
                    return this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(n), context.vertexAttribPointer(n, this.size, this.type, this.normalized, 0, 0)), n;
                  };
                  value.prototype.use = function(e) {
                    context.bindBuffer(this.target, this.buffer), this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(e), context.vertexAttribPointer(e, this.size, this.type, this.normalized, 0, 0));
                  };
                  return value;
                }()
              )
            }
          });
          var a = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
          _miniGl.commonUniforms = {
            projectionMatrix: new _miniGl.Uniform({
              type: "mat4",
              value: a
            }),
            modelViewMatrix: new _miniGl.Uniform({
              type: "mat4",
              value: a
            }),
            resolution: new _miniGl.Uniform({
              type: "vec2",
              value: [1, 1]
            }),
            aspectRatio: new _miniGl.Uniform({
              type: "float",
              value: 1
            })
          };
        }
        MiniGl2.prototype.setSize = function(e, t, e1, t1) {
          if (e === void 0) {
            e = 640;
          }
          if (t === void 0) {
            t = 480;
          }
          if (e1 === void 0) {
            e1 = 640;
          }
          if (t1 === void 0) {
            t1 = 480;
          }
          this.width = e, this.height = t, this.canvas.width = e1, this.canvas.height = t1, this.gl.viewport(0, 0, e1, t1), this.commonUniforms.resolution.value = [e1, t1], this.commonUniforms.aspectRatio.value = e1 / t1, this.debug("MiniGL.setSize", {
            width: e,
            height: t
          });
        };
        MiniGl2.prototype.setOrthographicCamera = function(e, t, n, i, s) {
          if (e === void 0) {
            e = 0;
          }
          if (t === void 0) {
            t = 0;
          }
          if (n === void 0) {
            n = 0;
          }
          if (i === void 0) {
            i = -2e3;
          }
          if (s === void 0) {
            s = 2e3;
          }
          this.commonUniforms.projectionMatrix.value = [
            2 / this.width,
            0,
            0,
            0,
            0,
            2 / this.height,
            0,
            0,
            0,
            0,
            2 / (i - s),
            0,
            e,
            t,
            n,
            1
          ], this.debug("setOrthographicCamera", this.commonUniforms.projectionMatrix.value);
        };
        MiniGl2.prototype.render = function() {
          this.gl.clearColor(0, 0, 0, 0), this.gl.clearDepth(1), this.meshes.forEach(function(e) {
            return e.draw();
          });
        };
        return MiniGl2;
      }()
    );
    exports.MiniGl = MiniGl;
  }
});

// node_modules/mesh-gradient.js/lib/core/stripe.gradient.js
var require_stripe_gradient = __commonJS({
  "node_modules/mesh-gradient.js/lib/core/stripe.gradient.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e2) {
          op = [6, e2];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gradient = void 0;
    var webgl_1 = require_webgl();
    function e(object, propertyName, val) {
      return propertyName in object ? Object.defineProperty(object, propertyName, {
        value: val,
        enumerable: true,
        configurable: true,
        writable: true
      }) : object[propertyName] = val, object;
    }
    var Gradient = (
      /** @class */
      function() {
        function Gradient2() {
          var t = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            t[_i] = arguments[_i];
          }
          var _this = this;
          e(this, "el", void 0), e(this, "cssVarRetries", 0), e(this, "maxCssVarRetries", 200), e(this, "angle", 0), e(this, "inputColors", []), e(this, "isLoadedClass", false), e(this, "scrollingTimeout", void 0), e(this, "isIntersecting", false), e(this, "shaderFiles", void 0), e(this, "vertexShader", void 0), e(this, "sectionColors", void 0), e(this, "computedCanvasStyle", void 0), e(this, "conf", void 0), e(this, "uniforms", void 0), e(this, "t", 1253106), e(this, "last", 0), e(this, "width", void 0), e(this, "minWidth", 1111), e(this, "height", 600), e(this, "xSegCount", void 0), e(this, "ySegCount", void 0), e(this, "mesh", void 0), e(this, "material", void 0), e(this, "geometry", void 0), e(this, "minigl", void 0), e(this, "amp", 320), e(this, "seed", 4), e(this, "freqX", 14e-5), e(this, "freqY", 29e-5), e(this, "freqDelta", 1e-5), e(this, "activeColors", [1, 1, 1, 1]), e(this, "isMetaKey", false), e(this, "isGradientLegendVisible", false), e(this, "resize", function() {
          }), e(this, "addIsLoadedClass", function() {
            !_this.isLoadedClass && (_this.isLoadedClass = true, _this.el.classList.add("isLoaded"), setTimeout(function() {
              _this.el.parentElement.classList.add("isLoaded");
            }, 3e3));
          }), e(this, "initGradient", function(selector, colors) {
            _this.el = document.querySelector(selector);
            _this.inputColors = colors;
            _this.connect();
            return _this;
          });
        }
        Gradient2.prototype.connect = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              this.shaderFiles = {
                vertex: "varying vec3 v_color;\n\nvoid main() {\n  float time = u_time * u_global.noiseSpeed;\n\n  vec2 noiseCoord = resolution * uvNorm * u_global.noiseFreq;\n\n  vec2 st = 1. - uvNorm.xy;\n\n  //\n  // Tilting the plane\n  //\n\n  // Front-to-back tilt\n  float tilt = resolution.y / 2.0 * uvNorm.y;\n\n  // Left-to-right angle\n  float incline = resolution.x * uvNorm.x / 2.0 * u_vertDeform.incline;\n\n  // Up-down shift to offset incline\n  float offset = resolution.x / 2.0 * u_vertDeform.incline * mix(u_vertDeform.offsetBottom, u_vertDeform.offsetTop, uv.y);\n\n  //\n  // Vertex noise\n  //\n\n  float noise = snoise(vec3(\n    noiseCoord.x * u_vertDeform.noiseFreq.x + time * u_vertDeform.noiseFlow,\n    noiseCoord.y * u_vertDeform.noiseFreq.y,\n    time * u_vertDeform.noiseSpeed + u_vertDeform.noiseSeed\n  )) * u_vertDeform.noiseAmp;\n\n  // Fade noise to zero at edges\n  noise *= 1.0 - pow(abs(uvNorm.y), 2.0);\n\n  // Clamp to 0\n  noise = max(0.0, noise);\n\n  vec3 pos = vec3(\n    position.x,\n    position.y + tilt + incline + noise - offset,\n    position.z\n  );\n\n  //\n  // Vertex color, to be passed to fragment shader\n  //\n\n  if (u_active_colors[0] == 1.) {\n    v_color = u_baseColor;\n  }\n\n  for (int i = 0; i < u_waveLayers_length; i++) {\n    if (u_active_colors[i + 1] == 1.) {\n      WaveLayers layer = u_waveLayers[i];\n\n      float noise = smoothstep(\n        layer.noiseFloor,\n        layer.noiseCeil,\n        snoise(vec3(\n          noiseCoord.x * layer.noiseFreq.x + time * layer.noiseFlow,\n          noiseCoord.y * layer.noiseFreq.y,\n          time * layer.noiseSpeed + layer.noiseSeed\n        )) / 2.0 + 0.5\n      );\n\n      v_color = blendNormal(v_color, layer.color, pow(noise, 4.));\n    }\n  }\n\n  //\n  // Finish\n  //\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}",
                noise: "//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n          + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}",
                blend: "//\n// https://github.com/jamieowen/glsl-blend\n//\n\n// Normal\n\nvec3 blendNormal(vec3 base, vec3 blend) {\n	return blend;\n}\n\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n	return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Screen\n\nfloat blendScreen(float base, float blend) {\n	return 1.0-((1.0-base)*(1.0-blend));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend) {\n	return vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n	return (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Multiply\n\nvec3 blendMultiply(vec3 base, vec3 blend) {\n	return base*blend;\n}\n\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\n	return (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Overlay\n\nfloat blendOverlay(float base, float blend) {\n	return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend) {\n	return vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\n	return (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Hard light\n\nvec3 blendHardLight(vec3 base, vec3 blend) {\n	return blendOverlay(blend,base);\n}\n\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\n	return (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Soft light\n\nfloat blendSoftLight(float base, float blend) {\n	return (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n	return vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\n	return (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Color dodge\n\nfloat blendColorDodge(float base, float blend) {\n	return (blend==1.0)?blend:min(base/(1.0-blend),1.0);\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend) {\n	return vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\n	return (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Color burn\n\nfloat blendColorBurn(float base, float blend) {\n	return (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend) {\n	return vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\n	return (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Vivid Light\n\nfloat blendVividLight(float base, float blend) {\n	return (blend<0.5)?blendColorBurn(base,(2.0*blend)):blendColorDodge(base,(2.0*(blend-0.5)));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend) {\n	return vec3(blendVividLight(base.r,blend.r),blendVividLight(base.g,blend.g),blendVividLight(base.b,blend.b));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\n	return (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Lighten\n\nfloat blendLighten(float base, float blend) {\n	return max(blend,base);\n}\n\nvec3 blendLighten(vec3 base, vec3 blend) {\n	return vec3(blendLighten(base.r,blend.r),blendLighten(base.g,blend.g),blendLighten(base.b,blend.b));\n}\n\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\n	return (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Linear burn\n\nfloat blendLinearBurn(float base, float blend) {\n	// Note : Same implementation as BlendSubtractf\n	return max(base+blend-1.0,0.0);\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\n	// Note : Same implementation as BlendSubtract\n	return max(base+blend-vec3(1.0),vec3(0.0));\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\n	return (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Linear dodge\n\nfloat blendLinearDodge(float base, float blend) {\n	// Note : Same implementation as BlendAddf\n	return min(base+blend,1.0);\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\n	// Note : Same implementation as BlendAdd\n	return min(base+blend,vec3(1.0));\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\n	return (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// Linear light\n\nfloat blendLinearLight(float base, float blend) {\n	return blend<0.5?blendLinearBurn(base,(2.0*blend)):blendLinearDodge(base,(2.0*(blend-0.5)));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend) {\n	return vec3(blendLinearLight(base.r,blend.r),blendLinearLight(base.g,blend.g),blendLinearLight(base.b,blend.b));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\n	return (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\n}",
                fragment: "varying vec3 v_color;\n\nvoid main() {\n  vec3 color = v_color;\n  if (u_darken_top == 1.0) {\n    vec2 st = gl_FragCoord.xy/resolution.xy;\n    color.g -= pow(st.y + sin(-12.0) * st.x, u_shadow_power) * 0.4;\n  }\n  gl_FragColor = vec4(color, 1.0);\n}"
              }, this.conf = {
                presetName: "",
                wireframe: false,
                density: [0.06, 0.16],
                zoom: 1,
                rotation: 0,
                playing: true
              }, document.querySelectorAll("canvas").length < 1 ? console.warn("DID NOT LOAD HERO STRIPE CANVAS") : (this.minigl = new webgl_1.MiniGl(this.el, null, null, true), this.el && this.init());
              return [
                2
                /*return*/
              ];
            });
          });
        };
        Gradient2.prototype.disconnect = function() {
          this.scrollObserver && (window.removeEventListener("scroll", this.handleScroll), window.removeEventListener("mousedown", this.handleMouseDown), window.removeEventListener("mouseup", this.handleMouseUp), window.removeEventListener("keydown", this.handleKeyDown), this.scrollObserver.disconnect()), window.removeEventListener("resize", this.resize);
        };
        Gradient2.prototype.setCanvasSize = function(width, height, initial) {
          if (initial === void 0) {
            initial = true;
          }
          this.width = width, this.height = height, this.minigl.setSize(Math.min(1024, this.width), Math.min(this.height, 600), this.width, this.height), this.minigl.setOrthographicCamera(), initial && (this.xSegCount = Math.ceil(this.width * this.conf.density[0])), initial && (this.ySegCount = Math.ceil(this.height * this.conf.density[1])), initial && this.mesh.geometry.setTopology(this.xSegCount, this.ySegCount), this.mesh.geometry.setSize(this.width, this.height), this.mesh.material.uniforms.u_shadow_power.value = this.width < 600 ? 5 : 6;
        };
        Gradient2.prototype.initMaterial = function() {
          this.uniforms = {
            u_time: new this.minigl.Uniform({
              value: 0
            }),
            u_shadow_power: new this.minigl.Uniform({
              value: 5
            }),
            u_darken_top: new this.minigl.Uniform({
              value: "" === this.el.dataset.jsDarkenTop ? 1 : 0
            }),
            u_active_colors: new this.minigl.Uniform({
              value: this.activeColors,
              type: "vec4"
            }),
            u_global: new this.minigl.Uniform({
              value: {
                noiseFreq: new this.minigl.Uniform({
                  value: [this.freqX, this.freqY],
                  type: "vec2"
                }),
                noiseSpeed: new this.minigl.Uniform({
                  value: 5e-6
                })
              },
              type: "struct"
            }),
            u_vertDeform: new this.minigl.Uniform({
              value: {
                incline: new this.minigl.Uniform({
                  value: Math.sin(this.angle) / Math.cos(this.angle)
                }),
                offsetTop: new this.minigl.Uniform({
                  value: -0.5
                }),
                offsetBottom: new this.minigl.Uniform({
                  value: -0.5
                }),
                noiseFreq: new this.minigl.Uniform({
                  value: [3, 4],
                  type: "vec2"
                }),
                noiseAmp: new this.minigl.Uniform({
                  value: this.amp
                }),
                noiseSpeed: new this.minigl.Uniform({
                  value: 10
                }),
                noiseFlow: new this.minigl.Uniform({
                  value: 3
                }),
                noiseSeed: new this.minigl.Uniform({
                  value: this.seed
                })
              },
              type: "struct",
              excludeFrom: "fragment"
            }),
            u_baseColor: new this.minigl.Uniform({
              value: this.sectionColors[0],
              type: "vec3",
              excludeFrom: "fragment"
            }),
            u_waveLayers: new this.minigl.Uniform({
              value: [],
              excludeFrom: "fragment",
              type: "array"
            })
          };
          for (var e_1 = 1; e_1 < this.sectionColors.length; e_1 += 1)
            this.uniforms.u_waveLayers.value.push(new this.minigl.Uniform({
              value: {
                color: new this.minigl.Uniform({
                  value: this.sectionColors[e_1],
                  type: "vec3"
                }),
                noiseFreq: new this.minigl.Uniform({
                  value: [2 + e_1 / this.sectionColors.length, 3 + e_1 / this.sectionColors.length],
                  type: "vec2"
                }),
                noiseSpeed: new this.minigl.Uniform({
                  value: 11 + 0.3 * e_1
                }),
                noiseFlow: new this.minigl.Uniform({
                  value: 6.5 + 0.3 * e_1
                }),
                noiseSeed: new this.minigl.Uniform({
                  value: this.seed + 10 * e_1
                }),
                noiseFloor: new this.minigl.Uniform({
                  value: 0.1
                }),
                noiseCeil: new this.minigl.Uniform({
                  value: 0.63 + 0.07 * e_1
                })
              },
              type: "struct"
            }));
          return this.vertexShader = [this.shaderFiles.noise, this.shaderFiles.blend, this.shaderFiles.vertex].join("\n\n"), new this.minigl.Material(this.vertexShader, this.shaderFiles.fragment, this.uniforms);
        };
        Gradient2.prototype.initMesh = function() {
          this.material = this.initMaterial(), this.geometry = new this.minigl.PlaneGeometry(), this.mesh = new this.minigl.Mesh(this.geometry, this.material);
        };
        Gradient2.prototype.shouldSkipFrame = function(e2) {
          return !!window.document.hidden || !this.conf.playing || parseInt(e2, 10) % 2 == 0 || void 0;
        };
        Gradient2.prototype.updateFrequency = function(e2) {
          this.freqX += e2, this.freqY += e2;
        };
        Gradient2.prototype.toggleColor = function(index) {
          this.activeColors[index] = 0 === this.activeColors[index] ? 1 : 0;
        };
        Gradient2.prototype.showGradientLegend = function() {
          this.width > this.minWidth && (this.isGradientLegendVisible = true, document.body.classList.add("isGradientLegendVisible"));
        };
        Gradient2.prototype.hideGradientLegend = function() {
          this.isGradientLegendVisible = false, document.body.classList.remove("isGradientLegendVisible");
        };
        Gradient2.prototype.changePosition = function(val) {
          var newValue = val;
          this.t = 1253106 + newValue * 1e3;
          this.mesh.material.uniforms.u_time.value = this.t;
          this.minigl.render();
        };
        Gradient2.prototype.init = function() {
          this.initGradientColors(), this.initMesh(), this.setCanvasSize(1024, 600), this.minigl.render();
          window.addEventListener("resize", this.resize);
        };
        Gradient2.prototype.initGradientColors = function() {
          this.sectionColors = this.inputColors.map(function(hexColor) {
            var hex = hexColor;
            if (4 === hex.length) {
              var hexTemp = hex.substr(1).split("").map(function(hexTemp2) {
                return hexTemp2 + hexTemp2;
              }).join("");
              hex = "#".concat(hexTemp);
            }
            return hex && "0x".concat(hex.slice(1));
          }).filter(Boolean).map(webgl_1.normalizeColor);
        };
        Gradient2.prototype.changeGradientColors = function(colors) {
          if (colors) {
            this.inputColors = colors;
            this.init();
          }
        };
        Gradient2.prototype.reGenerateCanvas = function() {
          this.minigl.render();
        };
        Gradient2.prototype.getGradientColors = function() {
          return this.inputColors;
        };
        return Gradient2;
      }()
    );
    exports.Gradient = Gradient;
  }
});

// node_modules/mesh-gradient.js/lib/index.js
var require_lib = __commonJS({
  "node_modules/mesh-gradient.js/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var MeshGradient = require_stripe_gradient().Gradient;
    exports.default = MeshGradient;
  }
});
export default require_lib();
//# sourceMappingURL=mesh-gradient__js.js.map
